[{"path":"http://zachmayer.github.io/caretEnsemble/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributor guidelines","title":"Contributor guidelines","text":"’re fixing bug, don’t think twice making PR! ’re adding new feautre, take look issue tracker first, see ’s already discussion aware , another open pull request.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/CONTRIBUTING.html","id":"contributor-code-of-conduct","dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor guidelines","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http:contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"http://zachmayer.github.io/caretEnsemble/ISSUE_TEMPLATE.html","id":"bug","dir":"","previous_headings":"","what":"BUG","title":"FEATURE REQUEST","text":"Please use checklist bug reports: - [ ] Write minimal reproducible example - [ ] Include example data minimal reproducible example - [ ] run sessionInfo()","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/ISSUE_TEMPLATE.html","id":"minimal-reproducible-example","dir":"","previous_headings":"","what":"Minimal, reproducible example:","title":"FEATURE REQUEST","text":"start NEW R session! ```{R} rm(list=ls(=T)) gc(reset=T) set.seed(1L) dat <- caret::twoClassSim(100L) X <- dat[,1L:5L] y <- dat[[“Class”]] models <- caretEnsemble::caretList( X, y, methodList=c(‘glm’, ‘rpart’) ) ens <- caretEnsemble::caretStack(models) print(ens) Please cut/paste output. version caret caretEnsemble old, upgrade :","code":"If you have some data that would be too difficult to construct using `caret::twoClassSim` or `caret::SLC14_1`, then you can always make a subset of your original data, using e.g. `head()`, `subset()` or the indices. Then use e.g. `dput()` to give us something that can be put in R immediately, e.g. `dput(head(iris, 4))`  If you must use `dput(head())`, please first remove an columns from your dataset that are not necessary to reproduce the error.  If your data frame has a factor with many levels, the `dput` output can be unwieldy because it will still list all the possible factor levels even if they aren't present in the the subset of your data. To solve this issue, you can use the `droplevels()` function: `dput(droplevels(head(iris, 4)))`  ## Session Info: ```{R} utils::sessionInfo() update.packages(oldPkgs=\"caret\", ask=FALSE) devtools::install_github(\"zachmayer/caretEnsemble\")"},{"path":"http://zachmayer.github.io/caretEnsemble/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2013-2024 Zachary Albert Mayer Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/articles/Version-4.0-New-Features.html","id":"multiclass-support","dir":"Articles","previous_headings":"","what":"Multiclass support","title":"Version 4.0 New Features","text":"caretEnsemble now fully supports multiclass problems:","code":"model_list <- caretEnsemble::caretList(   x = iris[, 1L:4L],   y = iris[, 5L],   methodList = c(\"rpart\", \"rf\") ) print(summary(model_list)) #> The following models were ensembled: rpart, rf   #>  #> Model accuracy: #>    model_name   metric     value         sd #>        <char>   <char>     <num>      <num> #> 1:      rpart Accuracy 0.9333333 0.04082483 #> 2:         rf Accuracy 0.9600000 0.02788867"},{"path":"http://zachmayer.github.io/caretEnsemble/articles/Version-4.0-New-Features.html","id":"greedy-optimizer-in-caretensemble","dir":"Articles","previous_headings":"","what":"Greedy Optimizer in caretEnsemble","title":"Version 4.0 New Features","text":"new version uses greedy optimizer default, ensuring ensemble never worse worst single model:","code":"ens <- caretEnsemble::caretEnsemble(model_list) print(summary(ens)) #> The following models were ensembled: rpart, rf   #>  #> Model Importance: #>     rpart_setosa rpart_versicolor  rpart_virginica        rf_setosa  #>           0.2937           0.0101           0.0122           0.0000  #>    rf_versicolor     rf_virginica  #>           0.3303           0.3537  #>  #> Model accuracy: #>    model_name   metric     value         sd #>        <char>   <char>     <num>      <num> #> 1:   ensemble Accuracy 0.9600000 0.01490712 #> 2:      rpart Accuracy 0.9333333 0.04082483 #> 3:         rf Accuracy 0.9600000 0.02788867"},{"path":"http://zachmayer.github.io/caretEnsemble/articles/Version-4.0-New-Features.html","id":"enhanced-s3-methods","dir":"Articles","previous_headings":"","what":"Enhanced S3 Methods","title":"Version 4.0 New Features","text":"caretStack (extension, caretEnsemble) now supports various S3 methods:","code":"print(ens) #> The following models were ensembled: rpart, rf   #>  #> caret::train model: #> Greedy Mean Squared Error Optimizer  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold)  #> Summary of sample sizes: 120, 120, 120, 120, 120  #> Resampling results: #>  #>   Accuracy  Kappa #>   0.96      0.94  #>  #> Tuning parameter 'max_iter' was held constant at a value of 100 #>  #> Final model: #> Greedy MSE #> RMSE:  0.1476488  #> Weights: #>                  setosa versicolor virginica #> rpart_setosa          1       0.00      0.00 #> rpart_versicolor      0       0.00      0.03 #> rpart_virginica       0       0.03      0.00 #> rf_setosa             0       0.00      0.00 #> rf_versicolor         0       0.97      0.00 #> rf_virginica          0       0.00      0.97 print(summary(ens)) #> The following models were ensembled: rpart, rf   #>  #> Model Importance: #>     rpart_setosa rpart_versicolor  rpart_virginica        rf_setosa  #>           0.2579           0.0113           0.0113           0.0000  #>    rf_versicolor     rf_virginica  #>           0.3490           0.3705  #>  #> Model accuracy: #>    model_name   metric     value         sd #>        <char>   <char>     <num>      <num> #> 1:   ensemble Accuracy 0.9600000 0.01490712 #> 2:      rpart Accuracy 0.9333333 0.04082483 #> 3:         rf Accuracy 0.9600000 0.02788867 plot(ens) ggplot2::autoplot(ens)"},{"path":"http://zachmayer.github.io/caretEnsemble/articles/Version-4.0-New-Features.html","id":"improved-default-traincontrol","dir":"Articles","previous_headings":"","what":"Improved Default trainControl","title":"Version 4.0 New Features","text":"new default trainControl constructor makes easier build appropriate controls caretLists. controls include explicit indexes based target, return stacked predictions, use probability estimates classification models.","code":"class_control <- caretEnsemble::defaultControl(iris$Species) print(ls(class_control)) #>  [1] \"adaptive\"          \"allowParallel\"     \"classProbs\"        #>  [4] \"fixedWindow\"       \"horizon\"           \"index\"             #>  [7] \"indexFinal\"        \"indexOut\"          \"initialWindow\"     #> [10] \"method\"            \"number\"            \"p\"                 #> [13] \"predictionBounds\"  \"preProcOptions\"    \"repeats\"           #> [16] \"returnData\"        \"returnResamp\"      \"sampling\"          #> [19] \"savePredictions\"   \"search\"            \"seeds\"             #> [22] \"selectionFunction\" \"skip\"              \"summaryFunction\"   #> [25] \"timingSamps\"       \"trim\"              \"verboseIter\" reg_control <- caretEnsemble::defaultControl(iris$Sepal.Length) print(ls(reg_control)) #>  [1] \"adaptive\"          \"allowParallel\"     \"classProbs\"        #>  [4] \"fixedWindow\"       \"horizon\"           \"index\"             #>  [7] \"indexFinal\"        \"indexOut\"          \"initialWindow\"     #> [10] \"method\"            \"number\"            \"p\"                 #> [13] \"predictionBounds\"  \"preProcOptions\"    \"repeats\"           #> [16] \"returnData\"        \"returnResamp\"      \"sampling\"          #> [19] \"savePredictions\"   \"search\"            \"seeds\"             #> [22] \"selectionFunction\" \"skip\"              \"summaryFunction\"   #> [25] \"timingSamps\"       \"trim\"              \"verboseIter\""},{"path":"http://zachmayer.github.io/caretEnsemble/articles/Version-4.0-New-Features.html","id":"mixed-resampling-strategies","dir":"Articles","previous_headings":"","what":"Mixed Resampling Strategies","title":"Version 4.0 New Features","text":"Models different resampling strategies can now ensembled:","code":"y <- iris[, 1L] x <- iris[, 2L:3L] flex_list <- caretEnsemble::caretList(   x = x,   y = y,   methodList = c(\"rpart\", \"rf\"),   trControl = caretEnsemble::defaultControl(y, number = 3L) ) #> note: only 1 unique complexity parameters in default grid. Truncating the grid to 1 .  flex_list$glm_boot <- caret::train(   x = x,   y = y,   method = \"glm\",   trControl = caretEnsemble::defaultControl(y, method = \"boot\", number = 25L) )  flex_ens <- caretEnsemble::caretEnsemble(flex_list) print(flex_ens) #> The following models were ensembled: rpart, rf, glm_boot   #>  #> caret::train model: #> Greedy Mean Squared Error Optimizer  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold)  #> Summary of sample sizes: 120, 121, 120, 119, 120  #> Resampling results: #>  #>   RMSE       Rsquared   MAE       #>   0.3213821  0.8504616  0.2652383 #>  #> Tuning parameter 'max_iter' was held constant at a value of 100 #>  #> Final model: #> Greedy MSE #> RMSE:  0.3204963  #> Weights: #>          [,1] #> rpart    0.00 #> rf       0.51 #> glm_boot 0.49"},{"path":"http://zachmayer.github.io/caretEnsemble/articles/Version-4.0-New-Features.html","id":"mixed-model-types","dir":"Articles","previous_headings":"","what":"Mixed Model Types","title":"Version 4.0 New Features","text":"caretEnsemble now allows ensembling mixed lists classification regression models:","code":"X <- iris[, 1L:4L]  target_class <- iris[, 5L] target_reg <- as.integer(iris[, 5L] == \"virginica\")  ctrl_class <- caretEnsemble::defaultControl(target_class) ctrl_reg <- caretEnsemble::defaultControl(target_reg)  model_class <- caret::train(iris[, 1L:4L], target_class, method = \"rf\", trControl = ctrl_class) model_reg <- caret::train(iris[, 1L:4L], target_reg, method = \"rf\", trControl = ctrl_reg) mixed_list <- caretEnsemble::as.caretList(list(class = model_class, reg = model_reg)) mixed_ens <- caretEnsemble::caretEnsemble(mixed_list) print(mixed_ens) #> The following models were ensembled: class, reg   #>  #> caret::train model: #> Greedy Mean Squared Error Optimizer  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold)  #> Summary of sample sizes: 120, 120, 120, 120, 120  #> Resampling results: #>  #>   Accuracy   Kappa #>   0.9466667  0.92  #>  #> Tuning parameter 'max_iter' was held constant at a value of 100 #>  #> Final model: #> Greedy MSE #> RMSE:  0.1520195  #> Weights: #>                  setosa versicolor virginica #> class_setosa          1       0.01      0.00 #> class_versicolor      0       0.97      0.01 #> class_virginica       0       0.02      0.00 #> reg                   0       0.00      0.99"},{"path":"http://zachmayer.github.io/caretEnsemble/articles/Version-4.0-New-Features.html","id":"transfer-learning","dir":"Articles","previous_headings":"","what":"Transfer Learning","title":"Version 4.0 New Features","text":"caretStack now supports transfer learning ensembling models trained different datasets: can also predict new data:","code":"train_idx <- sample.int(nrow(iris), 100L) train_data <- iris[train_idx, ] new_data <- iris[-train_idx, ]  model_list <- caretEnsemble::caretList(   x = train_data[, 1L:4L],   y = train_data[, 5L],   methodList = c(\"rpart\", \"rf\") )  transfer_ens <- caretEnsemble::caretEnsemble(   model_list,   new_X = new_data[, 1L:4L],   new_y = new_data[, 5L] )  print(transfer_ens) #> The following models were ensembled: rpart, rf   #>  #> caret::train model: #> Greedy Mean Squared Error Optimizer  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold)  #> Summary of sample sizes: 39, 41, 40, 40, 40  #> Resampling results: #>  #>   Accuracy  Kappa     #>   0.96      0.9398462 #>  #> Tuning parameter 'max_iter' was held constant at a value of 100 #>  #> Final model: #> Greedy MSE #> RMSE:  0.1090264  #> Weights: #>                  setosa versicolor virginica #> rpart_setosa          1       0.00         0 #> rpart_versicolor      0       0.00         0 #> rpart_virginica       0       0.00         0 #> rf_setosa             0       0.01         0 #> rf_versicolor         0       0.99         0 #> rf_virginica          0       0.00         1 preds <- predict(transfer_ens, newdata = head(new_data)) knitr::kable(preds, format = \"markdown\")"},{"path":"http://zachmayer.github.io/caretEnsemble/articles/Version-4.0-New-Features.html","id":"permutation-importance","dir":"Articles","previous_headings":"","what":"Permutation Importance","title":"Version 4.0 New Features","text":"Permutation importance now default method variable importance caretLists caretStacks: Note ensemble uses rpart classify easy class (setosa) uses rf distinguish 2 difficult classes. completes demonstration key new features caretEnsemble 4.0. enhancements provide greater flexibility, improved performance, easier usage ensemble modeling R.","code":"importance <- caret::varImp(transfer_ens) print(round(importance, 2L)) #>     rpart_setosa rpart_versicolor  rpart_virginica        rf_setosa  #>             0.36             0.00             0.00             0.00  #>    rf_versicolor     rf_virginica  #>             0.32             0.31"},{"path":"http://zachmayer.github.io/caretEnsemble/articles/caretEnsemble-intro.html","id":"caretlist","dir":"Articles","previous_headings":"","what":"caretList","title":"A Brief Introduction to caretEnsemble","text":"caretList flexible function fitting many different caret models, resampling parameters, dataset. returns convenient list caret objects can later passed caretEnsemble caretStack. caretList almost exactly arguments train (caret package), exception trControl argument comes last. can handle formula interface explicit x, y interface train. caret, formula interface introduces overhead x, y interface preferred. caretEnsemble 2 arguments can used specify models fit: methodList tuneList. methodList simple character vector methods fit default train parameters, tuneList can used customize call component model discussed detail later. First, lets build example dataset (adapted caret vignette): (train, formula interface convenient introduces move overhead. large datasets explicitly passing x y preferred). can use predict function extract predictions object new data: desire control model fit, use caretModelSpec construct list model specifications tuneList argument. argument can used fit several different variants model, can also used pass arguments train component functions (e.g. trace=FALSE nnet): Finally, note caretList support custom caret models. Fitting models beyond scope vignette, , can manually add model list (e.g. model_list_big[[\"my_custom_model\"]] <- my_custom_model). Just sure use re-sampling indexes trControl use caretList models!","code":"data(Sonar, package = \"mlbench\") set.seed(107L) inTrain <- caret::createDataPartition(y = Sonar$Class, p = 0.75, list = FALSE) training <- Sonar[inTrain, ] testing <- Sonar[-inTrain, ] model_list <- caretEnsemble::caretList(   Class ~ .,   data = training,   methodList = c(\"glmnet\", \"rpart\") ) print(summary(model_list)) #> The following models were ensembled: glmnet, rpart   #>  #> Model accuracy: #>    model_name metric     value         sd #>        <char> <char>     <num>      <num> #> 1:     glmnet    ROC 0.8599370 0.09069233 #> 2:      rpart    ROC 0.7495693 0.10710959 p <- predict(model_list, newdata = head(testing)) knitr::kable(p, format = \"markdown\") model_list_big <- caretEnsemble::caretList(   Class ~ .,   data = training,   methodList = c(\"glmnet\", \"rpart\"),   tuneList = list(     rf1 = caretEnsemble::caretModelSpec(method = \"rf\", tuneGrid = data.frame(.mtry = 2L)),     rf2 = caretEnsemble::caretModelSpec(method = \"rf\", tuneGrid = data.frame(.mtry = 10L), preProcess = \"pca\"),     nn = caretEnsemble::caretModelSpec(method = \"nnet\", tuneLength = 2L, trace = FALSE)   ) ) print(summary(model_list_big)) #> The following models were ensembled: rf1, rf2, nn, glmnet, rpart   #>  #> Model accuracy: #>    model_name metric     value         sd #>        <char> <char>     <num>      <num> #> 1:         rf    ROC 0.9233333 0.03092727 #> 2:         rf    ROC 0.8573319 0.06415653 #> 3:       nnet    ROC 0.8746849 0.04153548 #> 4:     glmnet    ROC 0.8589216 0.03577354 #> 5:      rpart    ROC 0.7144048 0.12164189"},{"path":"http://zachmayer.github.io/caretEnsemble/articles/caretEnsemble-intro.html","id":"caretensemble","dir":"Articles","previous_headings":"","what":"caretEnsemble","title":"A Brief Introduction to caretEnsemble","text":"caretList preferred way construct list caret models package, ensure resampling indexes identical across models. Lets take closer look list models:  can see plot, 2 models uncorrelated, rpart model occasionally anti-predictive, one re-sample showing AUC 0.46. can confirm 2 model”s correlation modelCor function caret (caret lot convenient functions analyzing lists models): 2 models make good candidate ensemble: predictions fairly uncorrelated, overall accuracy similar. simple, linear greedy optimization AUC using caretEnsemble: ensemble AUC training set resamples 0.87 1.9% better best individual model. Note levels Sonar Data “M” “R”, M level 1 R level 2. “M” stands “metal cylinder” “R” stands rock. M positive class, exclude class 2L predictions. can set excluded_class_id = 0L can also use varImp extract variable importances member ensemble, well final ensemble model:","code":"lattice::xyplot(caret::resamples(model_list)) caret::modelCor(caret::resamples(model_list)) #>           glmnet     rpart #> glmnet 1.0000000 0.5172171 #> rpart  0.5172171 1.0000000 greedy_ensemble <- caretEnsemble::caretEnsemble(model_list) print(summary(greedy_ensemble)) #> The following models were ensembled: glmnet, rpart   #>  #> Model Importance: #> glmnet_M glmnet_R  rpart_M  rpart_R  #>   0.3533   0.3942   0.1271   0.1254  #>  #> Model accuracy: #>    model_name metric     value         sd #>        <char> <char>     <num>      <num> #> 1:   ensemble    ROC 0.8788866 0.05319158 #> 2:     glmnet    ROC 0.8599370 0.09069233 #> 3:      rpart    ROC 0.7495693 0.10710959 model_preds <- predict(model_list, newdata = testing, excluded_class_id = 2L) ens_preds <- predict(greedy_ensemble, newdata = testing, excluded_class_id = 2L) model_preds$ensemble <- ens_preds auc <- caTools::colAUC(model_preds, testing$Class) print(auc) #>            glmnet     rpart  ensemble #> M vs. R 0.8472222 0.7746914 0.8657407 p <- predict(greedy_ensemble, newdata = head(testing), excluded_class_id = 0L) knitr::kable(p, format = \"markdown\") round(caret::varImp(greedy_ensemble), 4L) #> glmnet_M glmnet_R  rpart_M  rpart_R  #>   0.3331   0.3802   0.1441   0.1426"},{"path":"http://zachmayer.github.io/caretEnsemble/articles/caretEnsemble-intro.html","id":"caretstack","dir":"Articles","previous_headings":"","what":"caretStack","title":"A Brief Introduction to caretEnsemble","text":"Note glm_ensemble$ens_model regular caret object class train. glm-weighted model weights (glm vs rpart) test-set AUCs extremely similar caretEnsemble greedy optimization. can also use sophisticated ensembles simple linear weights, models much susceptible -fitting, generally require large sets resamples train (n=50 higher bootstrap samples). Lets try one anyways: case, sophisticated ensemble better simple weighted linear combination. Non-linear ensembles seem work best : Lots data. Lots models similar accuracy. models uncorrelated: one seems capture different aspect data, different models perform best different subsets data.","code":"glm_ensemble <- caretEnsemble::caretStack(model_list, method = \"glm\") model_preds2 <- model_preds model_preds2$ensemble <- predict(glm_ensemble, newdata = testing, excluded_class_id = 2L) print(caTools::colAUC(model_preds2, testing$Class)) #>            glmnet     rpart ensemble #> M vs. R 0.8472222 0.7746914 0.867284 CF <- coef(glm_ensemble$ens_model$finalModel)[-1L] print(CF / sum(CF)) #>    glmnet     rpart  #> 0.7154119 0.2845881 gbm_ensemble <- caretEnsemble::caretStack(   model_list,   method = \"gbm\",   verbose = FALSE,   tuneLength = 5L ) model_preds3 <- model_preds model_preds3$ensemble <- predict(gbm_ensemble, newdata = testing, excluded_class_id = 2L) caTools::colAUC(model_preds3, testing$Class) #>            glmnet     rpart  ensemble #> M vs. R 0.8472222 0.7746914 0.8657407"},{"path":"http://zachmayer.github.io/caretEnsemble/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zachary . Deane-Mayer. Author, maintainer, copyright holder. Jared E. Knowles. Contributor. Antón López. Contributor.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Deane-Mayer ZA (2024). caretEnsemble: Ensembles Caret Models. R package version 4.0.2, https://github.com/zachmayer/caretEnsemble, http://zachmayer.github.io/caretEnsemble/.","code":"@Manual{,   title = {caretEnsemble: Ensembles of Caret Models},   author = {Zachary A. Deane-Mayer},   year = {2024},   note = {R package version 4.0.2, https://github.com/zachmayer/caretEnsemble},   url = {http://zachmayer.github.io/caretEnsemble/}, }"},{"path":"http://zachmayer.github.io/caretEnsemble/index.html","id":"caretensemble","dir":"","previous_headings":"","what":"Ensembles of Caret Models","title":"Ensembles of Caret Models","text":"caretEnsemble framework stacking models fit caret package. Use caretList fit multiple models, use caretStack stack another caret model. First, use caretList fit many models data: , use caretEnsemble make greedy ensemble models can also use caretStack make non-linear ensemble Use autoplot ggplot2 plot ensemble diagnostics:","code":"set.seed(42L) data(diamonds, package = \"ggplot2\") dat <- data.table::data.table(diamonds) dat <- dat[sample.int(nrow(diamonds), 500L), ] models <- caretEnsemble::caretList(   price ~ .,   data = dat,   methodList = c(\"rf\", \"glmnet\") ) print(summary(models)) #> The following models were ensembled: rf, glmnet   #>  #> Model accuracy: #>    model_name metric    value       sd #>        <char> <char>    <num>    <num> #> 1:         rf   RMSE 1076.492 215.4737 #> 2:     glmnet   RMSE 1142.082 105.6022 greedy_stack <- caretEnsemble::caretEnsemble(models) print(greedy_stack) #> The following models were ensembled: rf, glmnet   #>  #> caret::train model: #> Greedy Mean Squared Error Optimizer  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold)  #> Summary of sample sizes: 400, 400, 400, 400, 400  #> Resampling results: #>  #>   RMSE      Rsquared   MAE      #>   969.2517  0.9406218  557.1987 #>  #> Tuning parameter 'max_iter' was held constant at a value of 100 #>  #> Final model: #> Greedy MSE #> RMSE:  989.2085  #> Weights: #>        [,1] #> rf     0.55 #> glmnet 0.45 rf_stack <- caretEnsemble::caretStack(models, method = \"rf\") #> note: only 1 unique complexity parameters in default grid. Truncating the grid to 1 . print(rf_stack) #> The following models were ensembled: rf, glmnet   #>  #> caret::train model: #> Random Forest  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold)  #> Summary of sample sizes: 400, 400, 400, 400, 400  #> Resampling results: #>  #>   RMSE      Rsquared  MAE      #>   1081.425  0.930012  540.3294 #>  #> Tuning parameter 'mtry' was held constant at a value of 2 #>  #> Final model: #>  #> Call: #>  randomForest(x = x, y = y, mtry = param$mtry)  #>                Type of random forest: regression #>                      Number of trees: 500 #> No. of variables tried at each split: 2 #>  #>           Mean of squared residuals: 925377 #>                     % Var explained: 93.95 ggplot2::autoplot(greedy_stack, training_data = dat, xvars = c(\"carat\", \"table\")) ggplot2::autoplot(rf_stack, training_data = dat, xvars = c(\"carat\", \"table\"))"},{"path":[]},{"path":"http://zachmayer.github.io/caretEnsemble/index.html","id":"install-the-stable-version-from-cran","dir":"","previous_headings":"","what":"Install the stable version from CRAN:","title":"Ensembles of Caret Models","text":"","code":"install.packages(\"caretEnsemble\")"},{"path":"http://zachmayer.github.io/caretEnsemble/index.html","id":"install-the-dev-version-from-github","dir":"","previous_headings":"","what":"Install the dev version from github:","title":"Ensembles of Caret Models","text":"also tagged versions caretEnsemble github can install via devtools. example, install previous release caretEnsemble use: useful latest release breaks aspect workflow. caretEnsemble pure R compilation, command work variety environments.","code":"devtools::install_github(\"zachmayer/caretEnsemble\") devtools::install_github(\"zachmayer/caretEnsemble@2.0.3\")"},{"path":"http://zachmayer.github.io/caretEnsemble/index.html","id":"package-development","dir":"","previous_headings":"","what":"Package development","title":"Ensembles of Caret Models","text":"package uses Makefile. Use make help see supported options. Use make fix-style fix simple linting errors. iterating writing code, run make dev. runs just make clean fix-style document lint spell test, quicker local dev loop. Please still run make making PR. Use make making pull request, also run R CMD CHECK code coverage check. runs make clean fix-style document install build-readme build-vignettes lint spell test check coverage preview-site.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/index.html","id":"first-time-dev-setup","dir":"","previous_headings":"","what":"First time dev setup:","title":"Ensembles of Caret Models","text":"run make install git repository install dev version caretEnsemble, along necessary package dependencies. # Inspiration similar packages: caretEnsemble inspired medley, turn inspired Caruana et. al.’s (2004) paper Ensemble Selection Libraries Models. want something similar python, check vecstack.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct:","title":"Ensembles of Caret Models","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/X.class.html","id":null,"dir":"Reference","previous_headings":"","what":"data for classification — X.class","title":"data for classification — X.class","text":"data classification","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/X.class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"data for classification — X.class","text":"Zachary Deane-Mayer zach.mayer@gmail.com","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/X.reg.html","id":null,"dir":"Reference","previous_headings":"","what":"data for classification — X.reg","title":"data for classification — X.reg","text":"data classification","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/X.reg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"data for classification — X.reg","text":"Zachary Deane-Mayer zach.mayer@gmail.com","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/Y.class.html","id":null,"dir":"Reference","previous_headings":"","what":"data for classification — Y.class","title":"data for classification — Y.class","text":"data classification","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/Y.reg.html","id":null,"dir":"Reference","previous_headings":"","what":"data for regression — Y.reg","title":"data for regression — Y.reg","text":"data regression","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/Y.reg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"data for regression — Y.reg","text":"Zachary Deane-Mayer zach.mayer@gmail.com","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/aggregate_mean_or_first.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate mean or first — aggregate_mean_or_first","title":"Aggregate mean or first — aggregate_mean_or_first","text":"numeric data take mean. character data take first value.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/aggregate_mean_or_first.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate mean or first — aggregate_mean_or_first","text":"","code":"aggregate_mean_or_first(x)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/aggregate_mean_or_first.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate mean or first — aggregate_mean_or_first","text":"x train object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/aggregate_mean_or_first.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate mean or first — aggregate_mean_or_first","text":"data.table::data.table predictions","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert object to caretList object - For Future Use — as.caretList.default","title":"Convert object to caretList object - For Future Use — as.caretList.default","text":"Converts object caretList  - Future Use","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert object to caretList object - For Future Use — as.caretList.default","text":"","code":"# Default S3 method as.caretList(object)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert object to caretList object - For Future Use — as.caretList.default","text":"object R object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert object to caretList object - For Future Use — as.caretList.default","text":"NA","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert object to caretList object — as.caretList","title":"Convert object to caretList object — as.caretList","text":"Converts object caretList","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert object to caretList object — as.caretList","text":"","code":"as.caretList(object)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert object to caretList object — as.caretList","text":"object R Object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert object to caretList object — as.caretList","text":"caretList object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list to caretList — as.caretList.list","title":"Convert list to caretList — as.caretList.list","text":"Converts list caretList","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list to caretList — as.caretList.list","text":"","code":"# S3 method for class 'list' as.caretList(object)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list to caretList — as.caretList.list","text":"object list caret models","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/as.caretList.list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list to caretList — as.caretList.list","text":"caretList object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/autoplot.caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function for more in-depth diagnostic plots of caretStack objects — autoplot.caretStack","title":"Convenience function for more in-depth diagnostic plots of caretStack objects — autoplot.caretStack","text":"function provides robust series diagnostic plots caretEnsemble object.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/autoplot.caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function for more in-depth diagnostic plots of caretStack objects — autoplot.caretStack","text":"","code":"# S3 method for class 'caretStack' autoplot(object, training_data = NULL, xvars = NULL, show_class_id = 2L, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/autoplot.caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function for more in-depth diagnostic plots of caretStack objects — autoplot.caretStack","text":"object caretStack object training_data data used train ensemble. Required xvars NULL Must row order models trained. xvars vector names x variables plot residuals show_class_id classification : class level show plot ... ignored","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/autoplot.caretStack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience function for more in-depth diagnostic plots of caretStack objects — autoplot.caretStack","text":"grid diagnostic plots. Top left range performance metric across component model along standard deviation. Top right residuals ensembled model plotted fitted values. Middle left bar graph weights component models. Middle right disagreement residuals component models (unweighted) across fitted values. Bottom left bottom right plots residuals two random user specified variables. Note ensemble must trained savePredictions = \"final\", required get residuals stack plot.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/autoplot.caretStack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience function for more in-depth diagnostic plots of caretStack objects — autoplot.caretStack","text":"","code":"set.seed(42) data(models.reg) ens <- caretStack(models.reg[1:2], method = \"lm\") #> Loading required package: ggplot2 #> Loading required package: lattice autoplot(ens) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' #> `geom_smooth()` using formula = 'y ~ x'"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.caretList.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 definition for concatenating caretList — c.caretList","title":"S3 definition for concatenating caretList — c.caretList","text":"take N objects class caretList concatenate larger object class caretList future ensembling","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.caretList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 definition for concatenating caretList — c.caretList","text":"","code":"# S3 method for class 'caretList' c(...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.caretList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 definition for concatenating caretList — c.caretList","text":"... objects class caretList train bind caretList","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.caretList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 definition for concatenating caretList — c.caretList","text":"caretList object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.caretList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 definition for concatenating caretList — c.caretList","text":"","code":"data(iris) model_list1 <- caretList(Sepal.Width ~ .,   data = iris,   tuneList = list(     lm = caretModelSpec(method = \"lm\")   ) )  model_list2 <- caretList(Sepal.Width ~ .,   data = iris, tuneLength = 1L,   tuneList = list(     rf = caretModelSpec(method = \"rf\")   ) )  bigList <- c(model_list1, model_list2)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.train.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 definition for concatenating train objects — c.train","title":"S3 definition for concatenating train objects — c.train","text":"take N objects class train concatenate object class caretList future ensembling","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 definition for concatenating train objects — c.train","text":"","code":"# S3 method for class 'train' c(...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 definition for concatenating train objects — c.train","text":"... objects class train bind caretList","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 definition for concatenating train objects — c.train","text":"caretList object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/c.train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 definition for concatenating train objects — c.train","text":"","code":"data(iris) model_lm <- caret::train(Sepal.Length ~ .,   data = iris,   method = \"lm\" )  model_rf <- caret::train(Sepal.Length ~ .,   data = iris,   method = \"rf\",   tuneLength = 1L )  model_list <- c(model_lm, model_rf)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretEnsemble.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine several predictive models via weights — caretEnsemble","title":"Combine several predictive models via weights — caretEnsemble","text":"Find greedy, positive linear combination several train objects Functions creating ensembles caret models: caretList caretStack","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretEnsemble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine several predictive models via weights — caretEnsemble","text":"","code":"caretEnsemble(all.models, excluded_class_id = 0L, tuneLength = 1L, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretEnsemble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine several predictive models via weights — caretEnsemble","text":".models object class caretList excluded_class_id integer level exclude binary classification multiclass problems. default classes excluded, greedy optimizer requires classes use negative coefficients. tuneLength size grid search tuning model. Defaults 1, parameter optimize number iterations, default 100 works well. ... additional arguments pass caret::train","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretEnsemble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine several predictive models via weights — caretEnsemble","text":"caretEnsemble object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretEnsemble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine several predictive models via weights — caretEnsemble","text":"greedyMSE works well want ensemble never worse single model dataset. worst case scenario, select single best model, none can ensembled improve overall score. also never assign model negative coefficient, can help avoid unintuitive cases prediction time (e.g. correlations predictors breaks new data, negative coefficients can lead bad results).","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretEnsemble.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Combine several predictive models via weights — caretEnsemble","text":"Every model \"library\" must separate train object. example, wish combine random forests several different values mtry, must build model value mtry. use several values mtry one train model, (e.g. tuneGrid = expand.grid(.mtry=2:5)), caret select best value mtry get chance include ensemble. default, RMSE used ensemble regression models, AUC used ensemble Classification models. function currently support multi-class problems","code":""},{"path":[]},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretEnsemble.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine several predictive models via weights — caretEnsemble","text":"Maintainer: Zachary . Deane-Mayer zach.mayer@gmail.com [copyright holder] contributors: Jared E. Knowles jknowles@gmail.com [contributor] Antón López anton.gomez.lopez@rai.usc.es [contributor]","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretEnsemble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine several predictive models via weights — caretEnsemble","text":"","code":"set.seed(42) models <- caretList(iris[1:50, 1:2], iris[1:50, 3], methodList = c(\"rpart\", \"rf\")) #> Warning: There were missing values in resampled performance measures. #> note: only 1 unique complexity parameters in default grid. Truncating the grid to 1 . #>  ens <- caretEnsemble(models) summary(ens) #> The following models were ensembled: rpart, rf   #>  #> Model Importance: #> rpart    rf  #> 0.952 0.048  #>  #> Model accuracy: #>    model_name metric     value         sd #>        <char> <char>     <num>      <num> #> 1:   ensemble   RMSE 0.1725561 0.03171894 #> 2:      rpart   RMSE 0.1679543 0.04899049 #> 3:         rf   RMSE 0.1869204 0.03174027"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretList.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of several train models from the caret package — caretList","title":"Create a list of several train models from the caret package — caretList","text":"Build list train objects suitable ensembling using caretStack function.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of several train models from the caret package — caretList","text":"","code":"caretList(   ...,   trControl = NULL,   methodList = NULL,   tuneList = NULL,   metric = NULL,   continue_on_fail = FALSE,   trim = TRUE,   aggregate_resamples = TRUE )"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of several train models from the caret package — caretList","text":"... arguments pass train. use formula interface, slower buggier compared X, y interface. Use data.table X. Particularly large dataset /many models, using data.table avoid unnecessary copies data can save lot time RAM. arguments determine train method gets dispatched. trControl trainControl object. NULL, use defaultControl. methodList optional, character vector caret models ensemble. One methodList tuneList must specified. tuneList optional, NAMED list caretModelSpec objects. much flexible methodList allows specification model-specific parameters (e.g. passing trace=FALSE nnet) metric string, metric optimize . NULL, choose good one. continue_on_fail logical, valid caretList returned excludes models fail, default FALSE trim logical train models trimmed save memory speed stacking aggregate_resamples logical, whether aggregate stacked predictions. Default TRUE.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a list of several train models from the caret package — caretList","text":"list train objects. model fails build, dropped list.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a list of several train models from the caret package — caretList","text":"","code":"caretList(   Sepal.Length ~ Sepal.Width,   head(iris, 50),   methodList = c(\"glm\", \"lm\"),   tuneList = list(     nnet = caretModelSpec(method = \"nnet\", trace = FALSE, tuneLength = 1L)   ) ) #> Warning: There were missing values in resampled performance measures. #> $nnet #> Neural Network  #>  #> No pre-processing #> Resampling results: #>  #>   RMSE      Rsquared  MAE      #>   4.019965  NaN       4.004778 #>  #> Tuning parameter 'size' was held constant at a value of 1 #> Tuning #>  parameter 'decay' was held constant at a value of 0 #>  #> $glm #> Generalized Linear Model  #>  #> No pre-processing #> Resampling results: #>  #>   RMSE   Rsquared   MAE       #>   0.239  0.5661346  0.1976156 #>  #>  #> $lm #> Linear Regression  #>  #> No pre-processing #> Resampling results: #>  #>   RMSE   Rsquared   MAE       #>   0.239  0.5661346  0.1976156 #>  #> Tuning parameter 'intercept' was held constant at a value of TRUE #>  #> attr(,\"class\") #> [1] \"caretList\" \"list\""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretModelSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a specification for fitting a caret model — caretModelSpec","title":"Generate a specification for fitting a caret model — caretModelSpec","text":"caret model specification consists 2 parts: model (string) arguments train call fitting model","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretModelSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a specification for fitting a caret model — caretModelSpec","text":"","code":"caretModelSpec(method = \"rf\", ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretModelSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a specification for fitting a caret model — caretModelSpec","text":"method modeling method pass caret::train ... arguments eventually passed caret::train","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretModelSpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a specification for fitting a caret model — caretModelSpec","text":"list lists","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretModelSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a specification for fitting a caret model — caretModelSpec","text":"","code":"caretModelSpec(\"rf\", tuneLength = 5L, preProcess = \"ica\") #> $method #> [1] \"rf\" #>  #> $tuneLength #> [1] 5 #>  #> $preProcess #> [1] \"ica\" #>"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretPredict.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction wrapper for train — caretPredict","title":"Prediction wrapper for train — caretPredict","text":"prediction wrapper train several features: - newdata null, return stacked predictions training job, rather -sample predictions. - Always returns probabilities classification models. - Optionally drops one predicted class classification models. - Always returns data.table","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretPredict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction wrapper for train — caretPredict","text":"","code":"caretPredict(   object,   newdata = NULL,   excluded_class_id = 1L,   aggregate_resamples = TRUE,   ... )"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretPredict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction wrapper for train — caretPredict","text":"object train object newdata New data use predictions. NULL, stacked predictions training data returned. excluded_class_id integer indicating class exclude. 0L, class excluded aggregate_resamples logical, whether aggregate resamples keys. Default TRUE. ... additional arguments pass predict.train, newdata NULL","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretPredict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction wrapper for train — caretPredict","text":"data.table","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine several predictive models via stacking — caretStack","title":"Combine several predictive models via stacking — caretStack","text":"Stack several train models using train model.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine several predictive models via stacking — caretStack","text":"","code":"caretStack(   all.models,   new_X = NULL,   new_y = NULL,   metric = NULL,   trControl = NULL,   excluded_class_id = 1L,   original_features = NULL,   aggregate_resamples = TRUE,   ... )"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine several predictive models via stacking — caretStack","text":".models caretList, object coercible caretList (list train objects) new_X Data predict caretList, prior training stack (transfer learning). NULL, stacked predictions extracted caretList models. new_y outcome variable predict caretList, prior training stack (transfer learning). NULL, use observed levels first model caret stack 0, include levels. metric metric use grid search stacking model. trControl trainControl object use training ensemble model. NULL, use defaultControl. excluded_class_id integer level exclude binary classification multiclass problems. original_features character vector names original features include stack NULL include features. features added stacked predictions models train ensemble model. aggregate_resamples logical, whether aggregate resamples keys. Default TRUE. ... additional arguments pass stacking model","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretStack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine several predictive models via stacking — caretStack","text":"S3 caretStack object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretStack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine several predictive models via stacking — caretStack","text":"Uses either transfer learning stacking stack models. Assumes models trained number rows data, target values. features, cross-validation strategies, model types (class vs reg) may vary however. stack models trained different number rows, please provide new_X new_y models can predict common set data stacking. models trained different columns, use stacking. differing rows columns model set, luck. need least common set rows training (stacking) common set columns inference time transfer learning.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretStack.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Combine several predictive models via stacking — caretStack","text":"Caruana, R., Niculescu-Mizil, ., Crew, G., & Ksikes, . (2004).   Ensemble Selection Libraries Models.   https://www.cs.cornell.edu/~caruana/ctp/ct.papers/caruana.icml04.icdm06long.pdf","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretStack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine several predictive models via stacking — caretStack","text":"","code":"models <- caretList(   x = iris[1:50, 1:2],   y = iris[1:50, 3],   methodList = c(\"rpart\", \"glm\") ) #> Warning: There were missing values in resampled performance measures. caretStack(models, method = \"glm\") #> The following models were ensembled: rpart, glm   #>  #> caret::train model: #> Generalized Linear Model  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold)  #> Summary of sample sizes: 40, 40, 40, 40, 40  #> Resampling results: #>  #>   RMSE       Rsquared   MAE       #>   0.1810296  0.1078031  0.1348091 #>  #>  #> Final model: #>  #> Call:  NULL #>  #> Coefficients: #> (Intercept)        rpart          glm   #>      0.8108       0.1772       0.2663   #>  #> Degrees of Freedom: 49 Total (i.e. Null);  47 Residual #> Null Deviance:\t    1.478  #> Residual Deviance: 1.455 \tAIC: -26.96"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretTrain.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to train caret models — caretTrain","title":"Wrapper to train caret models — caretTrain","text":"function wrapper around `train` function `caret` package. allows passing local global arguments `train` function. also allows option continue fail, trim output model. Trimming model removes components needed stacking, save memory speed stacking process. also converts preds data.table. internal function use caretList.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretTrain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to train caret models — caretTrain","text":"","code":"caretTrain(   local_args,   global_args,   continue_on_fail = FALSE,   trim = TRUE,   aggregate_resamples = TRUE )"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretTrain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to train caret models — caretTrain","text":"local_args list arguments pass `train` function. global_args list arguments pass `train` function. continue_on_fail logical indicating whether continue `train` function fails. `TRUE`, function return `NULL` `train` function fails. trim logical indicating whether trim output model. `TRUE`, function remove elements needed output model. aggregate_resamples logical indicating whether aggregate stacked predictions Default TRUE.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/caretTrain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to train caret models — caretTrain","text":"output `train` function.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/checkCustomModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a custom caret model info list — checkCustomModel","title":"Validate a custom caret model info list — checkCustomModel","text":"Currently, ensures model info lists also assigned \"method\" attribute consistency usage non-custom models","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/checkCustomModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a custom caret model info list — checkCustomModel","text":"","code":"checkCustomModel(x)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/checkCustomModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a custom caret model info list — checkCustomModel","text":"x model info list (e.g. getModelInfo(\"rf\", regex=F)\\[[1]])","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/checkCustomModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a custom caret model info list — checkCustomModel","text":"validated model info list (.e. x)","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/check_caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Check caretStack object — check_caretStack","title":"Check caretStack object — check_caretStack","text":"Make sure caretStack caretList train object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/check_caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check caretStack object — check_caretStack","text":"","code":"check_caretStack(object)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/check_caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check caretStack object — check_caretStack","text":"object caretStack object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/check_original_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Check original_features parameter — check_original_features","title":"Check original_features parameter — check_original_features","text":"Check original_features parameter caretStack, predict.caretStack varImp.caretStack","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/check_original_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check original_features parameter — check_original_features","text":"","code":"check_original_features(original_features, newdata, training = TRUE)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/check_original_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check original_features parameter — check_original_features","text":"original_features character vector names original features include stack newdata data use train model make predictions training logical indicating whether function called training prediction","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/defaultControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a default train control for use with caretList — defaultControl","title":"Construct a default train control for use with caretList — defaultControl","text":"Unlike caret::trainControl, function defaults 5 fold CV. CV good stacking, every observation test set exactly . use 5 instead 10 save compute time, caretList fitting many models. also construct explicit fold indexes return stacked predictions, needed stacking. classification models return class probabilities.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/defaultControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a default train control for use with caretList — defaultControl","text":"","code":"defaultControl(   target,   method = \"cv\",   number = 5L,   savePredictions = \"final\",   index = caret::createFolds(target, k = number, list = TRUE, returnTrain = TRUE),   is_class = is.factor(target) || is.character(target),   is_binary = length(unique(target)) == 2L,   ... )"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/defaultControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a default train control for use with caretList — defaultControl","text":"target target variable. method method use trainControl. number number folds use. savePredictions type predictions save. index fold indexes use. is_class logical, classification regression problem. is_binary logical, binary classification. ... arguments pass trainControl","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/defaultMetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a default metric — defaultMetric","title":"Construct a default metric — defaultMetric","text":"Caret defaults RMSE classification RMSE regression. classification, rather use ROC.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/defaultMetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a default metric — defaultMetric","text":"","code":"defaultMetric(is_class, is_binary)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/defaultMetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a default metric — defaultMetric","text":"is_class logical, classification regression problem. is_binary logical, binary classification.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/dotplot.caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison dotplot for a caretStack object — dotplot.caretStack","title":"Comparison dotplot for a caretStack object — dotplot.caretStack","text":"function make dotplot caretStack. uses dotplot caret package models ensemble, excluding final ensemble model.moment, function works ensembling model number resamples component models.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/dotplot.caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison dotplot for a caretStack object — dotplot.caretStack","text":"","code":"# S3 method for class 'caretStack' dotplot(x, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/dotplot.caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison dotplot for a caretStack object — dotplot.caretStack","text":"x object class caretStack ... passed dotplot","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/dotplot.caretStack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison dotplot for a caretStack object — dotplot.caretStack","text":"","code":"set.seed(42) models <- caretList(   x = iris[1:100, 1:2],   y = iris[1:100, 3],   methodList = c(\"rpart\", \"glm\") ) #> Warning: There were missing values in resampled performance measures. meta_model <- caretStack(models, method = \"lm\") lattice::dotplot(meta_model)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/dropExcludedClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop Excluded Class — dropExcludedClass","title":"Drop Excluded Class — dropExcludedClass","text":"Drop excluded class prediction data.table","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/dropExcludedClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop Excluded Class — dropExcludedClass","text":"","code":"dropExcludedClass(x, all_classes, excluded_class_id)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/dropExcludedClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop Excluded Class — dropExcludedClass","text":"x data.table predictions all_classes character vector classes excluded_class_id integer indicating class exclude","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractBestPreds.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the best predictions from a train object — extractBestPreds","title":"Extract the best predictions from a train object — extractBestPreds","text":"Extract best predictions train object.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractBestPreds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the best predictions from a train object — extractBestPreds","text":"","code":"extractBestPreds(x, aggregate_resamples = TRUE)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractBestPreds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the best predictions from a train object — extractBestPreds","text":"x train object aggregate_resamples logical, whether aggregate resamples keys. Default TRUE.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractBestPreds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the best predictions from a train object — extractBestPreds","text":"data.table::data.table predictions","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractCaretTarget.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the target variable from a set of arguments headed to the caret::train.default function. — extractCaretTarget.default","title":"Extracts the target variable from a set of arguments headed to the caret::train.default function. — extractCaretTarget.default","text":"function extracts y variable set arguments headed caret::train.default model.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractCaretTarget.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the target variable from a set of arguments headed to the caret::train.default function. — extractCaretTarget.default","text":"","code":"# Default S3 method extractCaretTarget(x, y, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractCaretTarget.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the target variable from a set of arguments headed to the caret::train.default function. — extractCaretTarget.default","text":"x object samples rows features columns. simple matrix, data frame type (e.g. sparse matrix). See Details . y numeric factor vector containing outcome sample. ... ignored","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractCaretTarget.formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the target variable from a set of arguments headed to the caret::train.formula function. — extractCaretTarget.formula","title":"Extracts the target variable from a set of arguments headed to the caret::train.formula function. — extractCaretTarget.formula","text":"function extracts y variable set arguments headed caret::train.formula model.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractCaretTarget.formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the target variable from a set of arguments headed to the caret::train.formula function. — extractCaretTarget.formula","text":"","code":"# S3 method for class 'formula' extractCaretTarget(form, data, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractCaretTarget.formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the target variable from a set of arguments headed to the caret::train.formula function. — extractCaretTarget.formula","text":"form formula form y ~ x1 + x2 + ... data Data frame variables specified formula preferentially taken. ... ignored","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractCaretTarget.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the target variable from a set of arguments headed to the caret::train function. — extractCaretTarget","title":"Extracts the target variable from a set of arguments headed to the caret::train function. — extractCaretTarget","text":"function extracts y variable set arguments headed caret::train model. Since 2 methods call caret::train, function also 2 methods.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractCaretTarget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the target variable from a set of arguments headed to the caret::train function. — extractCaretTarget","text":"","code":"extractCaretTarget(...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractCaretTarget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the target variable from a set of arguments headed to the caret::train function. — extractCaretTarget","text":"... set arguments, caret::train function","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.caretList.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract accuracy metrics from a caretList object — extractMetric.caretList","title":"Extract accuracy metrics from a caretList object — extractMetric.caretList","text":"Extract cross-validated accuracy metrics model caretList.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.caretList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract accuracy metrics from a caretList object — extractMetric.caretList","text":"","code":"# S3 method for class 'caretList' extractMetric(x, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.caretList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract accuracy metrics from a caretList object — extractMetric.caretList","text":"x caretList object ... passed extractMetric.train","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.caretList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract accuracy metrics from a caretList object — extractMetric.caretList","text":"data.table metrics model.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract accuracy metrics from a caretStack object — extractMetric.caretStack","title":"Extract accuracy metrics from a caretStack object — extractMetric.caretStack","text":"Extract cross-validated accuracy metrics ensemble model individual models caretStack.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract accuracy metrics from a caretStack object — extractMetric.caretStack","text":"","code":"# S3 method for class 'caretStack' extractMetric(x, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract accuracy metrics from a caretStack object — extractMetric.caretStack","text":"x caretStack object ... passed extractMetric.train extractMetric.caretList","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.caretStack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract accuracy metrics from a caretStack object — extractMetric.caretStack","text":"data.table metrics ensemble model individual models.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function to extract accuracy metrics from various model objects — extractMetric","title":"Generic function to extract accuracy metrics from various model objects — extractMetric","text":"generic function extract cross-validated accuracy metrics model objects.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function to extract accuracy metrics from various model objects — extractMetric","text":"","code":"extractMetric(x, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function to extract accuracy metrics from various model objects — extractMetric","text":"x object extract metrics. specific method dispatched based class x. ... Additional arguments passed specific methods.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function to extract accuracy metrics from various model objects — extractMetric","text":"data.table","code":""},{"path":[]},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.train.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract accuracy metrics from a train model — extractMetric.train","title":"Extract accuracy metrics from a train model — extractMetric.train","text":"Extract cross-validated accuracy metrics SDs caret.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract accuracy metrics from a train model — extractMetric.train","text":"","code":"# S3 method for class 'train' extractMetric(x, metric = NULL, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract accuracy metrics from a train model — extractMetric.train","text":"x train object metric character string representing metric extract. ... ignored NULL, uses metric used train model.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractMetric.train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract accuracy metrics from a train model — extractMetric.train","text":"numeric representing metric desired metric.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractModelName.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the method name associated with a single train object — extractModelName","title":"Extract the method name associated with a single train object — extractModelName","text":"Extracts method name associated single train object. Note standard models (.e. already prespecified caret), \"method\" attribute train object used directly custom models \"method\" attribute within model$modelInfo attribute used instead.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractModelName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the method name associated with a single train object — extractModelName","text":"","code":"extractModelName(x)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractModelName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the method name associated with a single train object — extractModelName","text":"x single caret train object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/extractModelName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the method name associated with a single train object — extractModelName","text":"Name associated model","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/greedyMSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Greedy optimization for MSE — greedyMSE","title":"Greedy optimization for MSE — greedyMSE","text":"Greedy optimization minimizing mean squared error. Works classification regression.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/greedyMSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Greedy optimization for MSE — greedyMSE","text":"","code":"greedyMSE(X, Y, max_iter = 100L)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/greedyMSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Greedy optimization for MSE — greedyMSE","text":"X numeric matrix features. Y numeric matrix target values. max_iter integer scalar maximum number iterations.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/greedyMSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Greedy optimization for MSE — greedyMSE","text":"list components: model_weights numeric matrix model_weights. RMSE numeric scalar root mean squared error. max_iter integer scalar maximum number iterations.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/greedyMSE_caret.html","id":null,"dir":"Reference","previous_headings":"","what":"caret interface for greedyMSE — greedyMSE_caret","title":"caret interface for greedyMSE — greedyMSE_caret","text":"caret interface greedyMSE. greedyMSE works well want ensemble never worse single predictor dataset. use intercept allow negative coefficients. makes highly constrained general work well standard classification regression problems. However, work well case : * predictors highly correlated * predictors highly correlated model * expect want positive coefficients worse case, method select one input use , many cases return positive, weighted average inputs. Since never uses negative weights, never get scenario one model weighted negative new data get predictions correlation changed. Since model always positive weighted average inputs, rarely worse individual models new data.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/greedyMSE_caret.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"caret interface for greedyMSE — greedyMSE_caret","text":"","code":"greedyMSE_caret()"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/isClassifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Classifier — isClassifier","title":"Is Classifier — isClassifier","text":"Check model classifier.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/isClassifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Classifier — isClassifier","text":"","code":"isClassifier(model)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/isClassifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Classifier — isClassifier","text":"model train object caret package.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/isClassifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Classifier — isClassifier","text":"logical indicating whether model classifier.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/isClassifierAndValidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a model type — isClassifierAndValidate","title":"Validate a model type — isClassifierAndValidate","text":"Validate model type train object. classification, validates model can predict probabilities, ,  stacked predictions requested, classProbs = TRUE.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/isClassifierAndValidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a model type — isClassifierAndValidate","text":"","code":"isClassifierAndValidate(object, validate_for_stacking = TRUE)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/isClassifierAndValidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a model type — isClassifierAndValidate","text":"object train object validate_for_stacking logical indicating whether validate object stacked predictions","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/isClassifierAndValidate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a model type — isClassifierAndValidate","text":"logical. TRUE classifier, otherwise FALSE.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/mae.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute MAE — mae","title":"Compute MAE — mae","text":"Compute mean absolute error two vectors.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/mae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute MAE — mae","text":"","code":"mae(a, b)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/mae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute MAE — mae","text":"numeric vector. b numeric vector.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/mae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute MAE — mae","text":"numeric scalar.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/methodCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the methods supplied by the user are valid caret methods — methodCheck","title":"Check that the methods supplied by the user are valid caret methods — methodCheck","text":"function uses modelLookup caret ensure list methods supplied user models caret can fit.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/methodCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the methods supplied by the user are valid caret methods — methodCheck","text":"","code":"methodCheck(x)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/methodCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the methods supplied by the user are valid caret methods — methodCheck","text":"x list user-supplied tuning parameters methods","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/models.class.html","id":null,"dir":"Reference","previous_headings":"","what":"caretList of classification models — models.class","title":"caretList of classification models — models.class","text":"Data caretEnsemble package","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/models.class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"caretList of classification models — models.class","text":"Zachary Deane-Mayer zach.mayer@gmail.com","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/models.reg.html","id":null,"dir":"Reference","previous_headings":"","what":"caretList of regression models — models.reg","title":"caretList of regression models — models.reg","text":"caretList regression models","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/models.reg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"caretList of regression models — models.reg","text":"Zachary Deane-Mayer zach.mayer@gmail.com","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/normalize_to_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize to One — normalize_to_one","title":"Normalize to One — normalize_to_one","text":"Normalize vector sum one.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/normalize_to_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize to One — normalize_to_one","text":"","code":"normalize_to_one(x)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/normalize_to_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize to One — normalize_to_one","text":"x numeric vector.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/normalize_to_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize to One — normalize_to_one","text":"numeric vector.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/permutationImportance.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation Importance — permutationImportance","title":"Permutation Importance — permutationImportance","text":"Permute variable dataset use change predictions calculate importance variable. Based scikit learn implementation permutation importance: https://scikit-learn.org/stable/modules/permutation_importance.html. However, compare target metric. JUST look change model's predictions, measured MAE. (classification, like using Brier score). shuffle variable recompute predictions shuffle. difference MAE. importance variable. normalize computing MAE shuffled original predictions upper bound MAE divide value. variable , shuffled, caused predictions bad shuffling output predictions, know variable 100 Similarly, regular permutation importance, variable , shuffled, gives MAE original model importance 0. method yield negative importances. merely measure much models uses variable, tell variables help hurt generalization. Use model's cross-validated metrics assess generalization.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/permutationImportance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation Importance — permutationImportance","text":"","code":"permutationImportance(model, newdata, normalize = TRUE)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/permutationImportance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation Importance — permutationImportance","text":"model train object caret package. newdata data.frame new data use compute importances. Can training data. normalize logical indicating whether normalize importances sum one.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/permutationImportance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation Importance — permutationImportance","text":"named numeric vector variable importances.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/plot.caretList.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a caretList object — plot.caretList","title":"Plot a caretList object — plot.caretList","text":"function plots performance model caretList object.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/plot.caretList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a caretList object — plot.caretList","text":"","code":"# S3 method for class 'caretList' plot(x, metric = NULL, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/plot.caretList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a caretList object — plot.caretList","text":"x caretList object metric metric plot ... ignored","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/plot.caretList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a caretList object — plot.caretList","text":"ggplot2 object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/plot.caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a caretStack object — plot.caretStack","title":"Plot a caretStack object — plot.caretStack","text":"function plots performance model caretList object.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/plot.caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a caretStack object — plot.caretStack","text":"","code":"# S3 method for class 'caretStack' plot(x, metric = NULL, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/plot.caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a caretStack object — plot.caretStack","text":"x caretStack object metric metric plot. NULL, use default metric used train model. ... ignored","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/plot.caretStack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a caretStack object — plot.caretStack","text":"ggplot2 object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.caretList.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a matrix of predictions for each of the models in a caretList — predict.caretList","title":"Create a matrix of predictions for each of the models in a caretList — predict.caretList","text":"Make matrix predictions list caret models","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.caretList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a matrix of predictions for each of the models in a caretList — predict.caretList","text":"","code":"# S3 method for class 'caretList' predict(   object,   newdata = NULL,   verbose = FALSE,   excluded_class_id = 1L,   aggregate_resamples = TRUE,   ... )"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.caretList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a matrix of predictions for each of the models in a caretList — predict.caretList","text":"object object class caretList newdata New data predictions. can NULL, ill-advised. verbose Logical. FALSE progress bar printed TRUE progress bar shown. Default FALSE. excluded_class_id Integer. class id drop predicting multiclass aggregate_resamples logical, whether aggregate resamples keys. Default TRUE. ... arguments pass predict.train","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Make predictions from a caretStack — predict.caretStack","title":"Make predictions from a caretStack — predict.caretStack","text":"Make predictions caretStack. function passes data function turn make matrix predictions, multiplies matrix vector weights get single, combined vector predictions.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make predictions from a caretStack — predict.caretStack","text":"","code":"# S3 method for class 'caretStack' predict(   object,   newdata = NULL,   se = FALSE,   level = 0.95,   excluded_class_id = 0L,   return_class_only = FALSE,   verbose = FALSE,   aggregate_resamples = TRUE,   ... )"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make predictions from a caretStack — predict.caretStack","text":"object  caretStack make predictions . newdata new dataframe make predictions se logical, prediction errors produced? Default false. level tolerance/confidence level returned excluded_class_id class exclude predictions. Note caretStack trained excluded_class_id, class ALWAYS excluded predictions caretList input models. excluded_class_id predict.caretStack final ensemble model. different classes excluded caretList models final ensemble model. return_class_only logical indicating whether return class predictions factor. TRUE, return factor rather data.table. convenience function, widely used. example downstream process consumes output model, process consume probabilities class. make easier change prediction probability thresholds needed future. verbose logical indicating whether print progress aggregate_resamples logical, whether aggregate resamples keys. Default TRUE. ... arguments pass predict.train ensemble model. specify type . classification, type always prob, regression, type always raw.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.caretStack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make predictions from a caretStack — predict.caretStack","text":"data.table predictions","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.caretStack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make predictions from a caretStack — predict.caretStack","text":"Prediction weights defined variable importance stacked caret model. available cases library model predictions transformed passed stacking model.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.caretStack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make predictions from a caretStack — predict.caretStack","text":"","code":"models <- caretList(   x = iris[1:100, 1:2],   y = iris[1:100, 3],   methodList = c(\"rpart\", \"glm\") ) #> Warning: There were missing values in resampled performance measures. meta_model <- caretStack(models, method = \"lm\") RMSE(predict(meta_model, iris[101:150, 1:2]), iris[101:150, 3]) #> Warning: argument is not numeric or logical: returning NA #> [1] NA"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.greedyMSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for greedyMSE — predict.greedyMSE","title":"Predict method for greedyMSE — predict.greedyMSE","text":"Predict method greedyMSE objects.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.greedyMSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for greedyMSE — predict.greedyMSE","text":"","code":"# S3 method for class 'greedyMSE' predict(object, newdata, return_labels = FALSE, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.greedyMSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for greedyMSE — predict.greedyMSE","text":"object greedyMSE object. newdata numeric matrix new data. return_labels logical scalar whether return labels. ... Additional arguments. Ignored.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/predict.greedyMSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict method for greedyMSE — predict.greedyMSE","text":"numeric matrix predictions.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a caretStack object — print.caretStack","title":"Print a caretStack object — print.caretStack","text":"function print caretStack.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a caretStack object — print.caretStack","text":"","code":"# S3 method for class 'caretStack' print(x, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a caretStack object — print.caretStack","text":"x object class caretStack ... ignored","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.caretStack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a caretStack object — print.caretStack","text":"","code":"models <- caretList(   x = iris[1:100, 1:2],   y = iris[1:100, 3],   methodList = c(\"rpart\", \"glm\") ) #> Warning: There were missing values in resampled performance measures. meta_model <- caretStack(models, method = \"lm\") print(meta_model) #> The following models were ensembled: rpart, glm   #>  #> caret::train model: #> Linear Regression  #>  #> No pre-processing #> Resampling: Cross-Validated (5 fold)  #> Summary of sample sizes: 80, 79, 81, 80, 80  #> Resampling results: #>  #>   RMSE       Rsquared   MAE       #>   0.5541616  0.8669472  0.4294123 #>  #> Tuning parameter 'intercept' was held constant at a value of TRUE #>  #> Final model: #>  #> Call: #> lm(formula = .outcome ~ ., data = dat) #>  #> Coefficients: #> (Intercept)        rpart          glm   #>    -0.06621      0.14816      0.87952   #>"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.greedyMSE.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for greedyMSE — print.greedyMSE","title":"Print method for greedyMSE — print.greedyMSE","text":"Print method greedyMSE objects.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.greedyMSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for greedyMSE — print.greedyMSE","text":"","code":"# S3 method for class 'greedyMSE' print(x, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.greedyMSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for greedyMSE — print.greedyMSE","text":"x greedyMSE object. ... Additional arguments. Ignored.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.summary.caretList.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary.caretList object — print.summary.caretList","title":"Print a summary.caretList object — print.summary.caretList","text":"function print summary.caretList","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.summary.caretList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary.caretList object — print.summary.caretList","text":"","code":"# S3 method for class 'summary.caretList' print(x, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.summary.caretList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary.caretList object — print.summary.caretList","text":"x object class summary.caretList ... ignored","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.summary.caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary.caretStack object — print.summary.caretStack","title":"Print a summary.caretStack object — print.summary.caretStack","text":"function print summary.caretStack.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.summary.caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary.caretStack object — print.summary.caretStack","text":"","code":"# S3 method for class 'summary.caretStack' print(x, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/print.summary.caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary.caretStack object — print.summary.caretStack","text":"x object class summary.caretStack ... ignored","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/set_excluded_class_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Set excluded class id — set_excluded_class_id","title":"Set excluded class id — set_excluded_class_id","text":"Set excluded class id caretStack object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/set_excluded_class_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set excluded class id — set_excluded_class_id","text":"","code":"set_excluded_class_id(object, is_class)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/set_excluded_class_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set excluded class id — set_excluded_class_id","text":"object caretStack object is_class model type logical vector length 1","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/shuffled_mae.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffled MAE — shuffled_mae","title":"Shuffled MAE — shuffled_mae","text":"Compute mean absolute error model's predictions variable shuffled.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/shuffled_mae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffled MAE — shuffled_mae","text":"","code":"shuffled_mae(model, original_data, target, pred_type, shuffle_idx)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/shuffled_mae.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffled MAE — shuffled_mae","text":"original_data data.table original data. target matrix target values. shuffle_idx vector shuffled indices.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/shuffled_mae.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffled MAE — shuffled_mae","text":"numeric vector mean absolute errors.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/stackedTrainResiduals.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracted stacked residuals for the autoplot — stackedTrainResiduals","title":"Extracted stacked residuals for the autoplot — stackedTrainResiduals","text":"function extracts predictions, observeds, residuals train object. uses object's stacked predictions cross-validation.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/stackedTrainResiduals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracted stacked residuals for the autoplot — stackedTrainResiduals","text":"","code":"stackedTrainResiduals(object, show_class_id = 2L)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/stackedTrainResiduals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracted stacked residuals for the autoplot — stackedTrainResiduals","text":"object train object show_class_id classification : class level use residuals","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/stackedTrainResiduals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracted stacked residuals for the autoplot — stackedTrainResiduals","text":"data.table::data.table predictions, observeds, residuals","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/sub-.caretList.html","id":null,"dir":"Reference","previous_headings":"","what":"Index a caretList — [.caretList","title":"Index a caretList — [.caretList","text":"Index caret list extract caret models new caretList object","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/sub-.caretList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index a caretList — [.caretList","text":"","code":"# S3 method for class 'caretList' object[index]"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/sub-.caretList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index a caretList — [.caretList","text":"object object class caretList index selected index","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/summary.caretList.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a caretList — summary.caretList","title":"Summarize a caretList — summary.caretList","text":"function summarizes performance model caretList object.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/summary.caretList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a caretList — summary.caretList","text":"","code":"# S3 method for class 'caretList' summary(object, metric = NULL, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/summary.caretList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a caretList — summary.caretList","text":"object caretList object metric metric show. NULL use metric used train model ... passed extractMetric","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/summary.caretList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a caretList — summary.caretList","text":"data.table metrics model.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/summary.caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a caretStack object — summary.caretStack","title":"Summarize a caretStack object — summary.caretStack","text":"function summarize caretStack.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/summary.caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a caretStack object — summary.caretStack","text":"","code":"# S3 method for class 'caretStack' summary(object, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/summary.caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a caretStack object — summary.caretStack","text":"object object class caretStack ... ignored","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/summary.caretStack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a caretStack object — summary.caretStack","text":"","code":"models <- caretList(   x = iris[1:100, 1:2],   y = iris[1:100, 3],   methodList = c(\"rpart\", \"glm\") ) #> Warning: There were missing values in resampled performance measures. meta_model <- caretStack(models, method = \"lm\") summary(meta_model) #> The following models were ensembled: rpart, glm   #>  #> Model Importance: #>  rpart    glm  #> 0.1405 0.8595  #>  #> Model accuracy: #>    model_name metric     value         sd #>        <char> <char>     <num>      <num> #> 1:   ensemble   RMSE 0.5682643 0.05767253 #> 2:      rpart   RMSE 0.8334089 0.21435945 #> 3:        glm   RMSE 0.5627433 0.06821899"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/tuneCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that the tuning parameters list supplied by the user is valid — tuneCheck","title":"Check that the tuning parameters list supplied by the user is valid — tuneCheck","text":"function makes sure tuning parameters passed user valid proper naming, etc.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/tuneCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that the tuning parameters list supplied by the user is valid — tuneCheck","text":"","code":"tuneCheck(x)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/tuneCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that the tuning parameters list supplied by the user is valid — tuneCheck","text":"x list user-supplied tuning parameters methods","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/validateExcludedClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the excluded class — validateExcludedClass","title":"Validate the excluded class — validateExcludedClass","text":"Helper function ensure excluded level classification integer. Set 0L exclude class.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/validateExcludedClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the excluded class — validateExcludedClass","text":"","code":"validateExcludedClass(arg)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/validateExcludedClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the excluded class — validateExcludedClass","text":"arg value check","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/validateExcludedClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the excluded class — validateExcludedClass","text":"integer","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/varImp.caretStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable importance for caretStack — varImp.caretStack","title":"Variable importance for caretStack — varImp.caretStack","text":"function extract variable importance caretStack.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/varImp.caretStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable importance for caretStack — varImp.caretStack","text":"","code":"# S3 method for class 'caretStack' varImp(object, newdata = NULL, normalize = TRUE, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/varImp.caretStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable importance for caretStack — varImp.caretStack","text":"object object class caretStack newdata data use computing importance. NULL, use stacked predictions models normalize logical indicating whether normalize importances sum one. ... passed predict.caretList","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/varImp.greedyMSE.html","id":null,"dir":"Reference","previous_headings":"","what":"variable importance for a greedyMSE model — varImp.greedyMSE","title":"variable importance for a greedyMSE model — varImp.greedyMSE","text":"Variable importance greedyMSE model.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/varImp.greedyMSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"variable importance for a greedyMSE model — varImp.greedyMSE","text":"","code":"# S3 method for class 'greedyMSE' varImp(object, ...)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/varImp.greedyMSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"variable importance for a greedyMSE model — varImp.greedyMSE","text":"object greedyMSE object. ... Additional arguments. Ignored.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/wtd.sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a weighted standard deviation — wtd.sd","title":"Calculate a weighted standard deviation — wtd.sd","text":"Used weight deviations among ensembled model predictions","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/reference/wtd.sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a weighted standard deviation — wtd.sd","text":"","code":"wtd.sd(x, w, na.rm = FALSE)"},{"path":"http://zachmayer.github.io/caretEnsemble/reference/wtd.sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a weighted standard deviation — wtd.sd","text":"x numeric vector w vector weights equal length x na.rm logical indicating handle missing values, default = TRUE","code":""},{"path":[]},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"new-features-4-0-2","dir":"Changelog","previous_headings":"","what":"New Features","title":"caretEnsemble 4.0.2","text":"Add option keep resamples repeated fold caretStack caretList, rather aggregating one resample per row original data. can give stacking model variance work , can lead lot issues aligning predictions different models, particularly ones use different resampling strategies. Add option include original features raw data stack, stacking new dataset rather stacked predictions.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"caretensemble-401","dir":"Changelog","previous_headings":"","what":"caretEnsemble 4.0.1","title":"caretEnsemble 4.0.1","text":"CRAN release: 2024-09-12","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"improvements-4-0-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"caretEnsemble 4.0.1","text":"Added aggregate_resamples option caretStack related functions control whether resamples aggregated. Speed example autoplot runs <1 second platforms.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"caretensemble-400","dir":"Changelog","previous_headings":"","what":"caretEnsemble 4.0.0","title":"caretEnsemble 4.0.0","text":"CRAN release: 2024-08-17","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"major-changes-4-0-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"caretEnsemble 4.0.0","text":"Multiclass support! caretList, caretStack, caretEnsemble. greedy optimizer back! caretEnsemble now uses greedy optimizer default. optimizer can never worse worst single model. caretStack still supports caret models, including glm.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"internal-changes-4-0-0","dir":"Changelog","previous_headings":"","what":"Internal Changes","title":"caretEnsemble 4.0.0","text":"Refactored internals scalability (e.g. data.table predictions, trim un-needed data default). Moved S3 methods caretStack, now supports print, summary, plot, dotplot, autoplot. caretEnsemble inherits caretStack, therefore also supports methods. Allow ensembling mixed lists classification regression models. Allow ensemble models different resampling strategies, long trained data. Allow transfer learning ensembling models trained different datasets. Added permutation importance default importance method caretLists caretStacks. Add default trainControl constructor make easier build good controls training caretLists stacking caretStack. Expanded test coverage 100%. Sped test suite (unit tests now run 20 seconds). Delinted codebase: now conforms available linters save object name linter. Added makefile easier local package development. Fixed badges readme. Added pkgdown site. Switched GitHub Actions (Travis) CI. Internal refactoring, optimization, bug fixes.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"caretensemble-203","dir":"Changelog","previous_headings":"","what":"caretEnsemble 2.0.3","title":"caretEnsemble 2.0.3","text":"CRAN release: 2023-09-20","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"bug-fixes-2-0-3","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"caretEnsemble 2.0.3","text":"Fix broken package documentation new roxygen2. Replace deprecated linters new versions.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"caretensemble-202","dir":"Changelog","previous_headings":"","what":"caretEnsemble 2.0.2","title":"caretEnsemble 2.0.2","text":"CRAN release: 2023-02-09","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"bug-fixes-2-0-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"caretEnsemble 2.0.2","text":"Fix broken tests r-devel.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"caretensemble-201","dir":"Changelog","previous_headings":"","what":"caretEnsemble 2.0.1","title":"caretEnsemble 2.0.1","text":"CRAN release: 2019-12-12","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"minor-fixes-2-0-1","dir":"Changelog","previous_headings":"","what":"Minor Fixes","title":"caretEnsemble 2.0.1","text":"Minor fixes support R 4.0.","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"caretensemble-200","dir":"Changelog","previous_headings":"","what":"caretEnsemble 2.0.0","title":"caretEnsemble 2.0.0","text":"CRAN release: 2016-02-07","code":""},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"major-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"caretEnsemble 2.0.0","text":"caretEnsemble now inherits caretStack. Removed optimizers now use glm caretEnsemble (optimizers added back caret.train models future release). Cleaned namespace (dependencies explicit imports, rather implicit imports dependencies). Removed S3 functions really S3 functions (e.g. autoplot fortify). either make true S3 classes, inherit packages define future release. Fixed build Travis locally.","code":""},{"path":[]},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"improvements-1-0-5","dir":"Changelog","previous_headings":"","what":"Improvements","title":"caretEnsemble 1.0.5","text":"Change output predict functions better align predict methods R (predict.caretEnsemble predict.caretStack). Update documentation predict methods better explain model disagreement calculation. Speed memory improvements switching data.table internals. Modified formula weighted standard deviation model disagreement calculation.","code":""},{"path":[]},{"path":"http://zachmayer.github.io/caretEnsemble/news/index.html","id":"introduction-1-0","dir":"Changelog","previous_headings":"","what":"Introduction","title":"caretEnsemble 1.0 - First CRAN release","text":"caretEnsemble new package making ensembles caret models.","code":""}]
